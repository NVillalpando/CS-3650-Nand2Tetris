// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array freeList;
    static int heapBase, length, next;

    /** Initializes the class. */
    function void init() {
	let heapBase = 2048;
	let freeList = heapBase;
	
	let length = 0;
	let freeList[length] = 14335;
	
	let next = 1;
	let freeList[next] = null;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	var Array RAM;
	let RAM = address;
	return RAM[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	var Array RAM;
	let RAM = address;
	let RAM[0] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var Array block, lastBlock, nextBlock;
	let block = freeList;
	let lastBlock = 0;

	// sift through block and find open space
	while (block[length] < size) {
	   let lastBlock = block;
	   let block = block[next];
	   // reaches end, cant find anything
	   if (block = null) { return -1; }
	}
	
	// block allocation begins
	let nextBlock = block + 2 + size;
	let nextBlock[length] = block[length] - size - 2;
	let nextBlock[next] = block[next];
	let block[length] = size;
	let block[next] = null;

	if (lastBlock = 0) { let freeList = nextBlock;}
	else { let lastBlock[next] = nextBlock;}
	return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	var Array block;
	let block = o - 2;
	let block[next] = freeList;
	let freeList = block;
	return;
    }    
}
