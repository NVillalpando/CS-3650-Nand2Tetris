// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int str_len;
    field int str_capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	if (maxLength > 0) { let str = Array.new(maxLength);}
	else { let str = Array.new(1);}

	let str_len = 0;
	let str_capacity = maxLength;
	return this;
    }

    /** Disposes this string. */
    method void dispose() {
	do Memory.deAlloc(str);
	return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return str_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
	return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
	let str[j] = c;
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
	let str[str_len] = c;
	let str_len = str_len + 1;
	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
	let str_len = str_len - 1;
	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
	var int int_val, i , data;
	var bool sign;
	let int_val = 0;
	let i = 0;
	let sign = false;

	// check for negative sign, will skip temporarily.
	if (str[0] = 45) { let i = 1; let sign = true; }
	
	// while loop for int conversion
	while (i < str_len) {
	   // number code check
	   if (str[i] > 47 & str[i] < 57) {
		// convert to num based on string position
		let data = str[i] - 48;
		let int_val = (int_val * 10) + data;
		let i = i + 1;
	   }

	   // else check once num not detected, fixes sign and returns.
	   else {
		if (sign) { return -int_val;}
		return int_val;
	   }
	}
	// if num was always detected, performs same as above.
	if (sign) { return -int_val;}
	return int_val; 
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // clear the string in place of new int
	let str_len = 0;

	// Add negative
	if( val < 0 ) { let val = -val; do appendChar(45);}

	// call helper method to recursively handle the numbers.
	do setIntHelper(val);
	return;
    }

    /** Helper method for setInt which deals with recursion to convert the #. */
    method void setIntHelper(int val) {
	var int quotient;
	var int mod;
	var char numChar;

	let quotient = val / 10;
	let mod = val - (quotient * 10);
	let numChar = String.digitToChar(mod);

	// base case of recursion, reaches here once val has shrunken
	if (val < 10) { do appendChar(numChar);}
	
	// recursive call for next num
	else { do setIntHelper(quotient); do appendChar(numChar);}
	return;
    }

   /** Returns the character of a digit. */
   function char digitToChar(int val) {
	return val + 48;
   }

    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }
}
